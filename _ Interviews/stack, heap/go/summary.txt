В Go каждая горутина имеет свой стек.

In Go, no Goroutine is allowed to have a pointer that points to memory on
another Goroutine's stack. This is because the stack memory for a Goroutine can
be replaced with a new block of memory when the stack has to grow or shrink.

What these posts are trying to lead you to is guidelines for choosing value or
pointer semantics for any given type. Each semantic comes with a benefit and cost.
Value semantics keep values on the stack which reduces pressure on the GC.
However, there are different copies of any given value that must be stored,
tracked and maintained. Pointer semantics place values on the heap which can
put pressure on the GC. However, they are efficient because there is only one
value that needs to be stored, tracked and maintained. The key is using each
semantic correctly, consistently and in balance.