================================== Lambda ===============================
Limit: runtime - 15 min, RAM - 10 GB.
It's almost always better to select an answer on the test that uses
Lambda or containers rather than a traditional operating system.

Can be invoked by triggers. Lambda is easily integrated with many services.
Can run inside or outside a VPC (default).

Lambda loves roles.

CloudWatch Events (EventBridge) is a common trigger for Lambda.

============================ Serverless Repository =========================
Templates. Define whole applications via AWS SAM templates. Private by default.
You have 2 choices: publish or deploy.
Is heavily integrated with Lambda.

=============================== Containers ===============================
Containers help you easily migrate from on-premises to AWS.
ECS (Elastic Container Service) — это сервис для запуска и управления
контейнерами на инфраструктуре AWS
Simple orchestration service for Docker containers (like k8s).
Favor using AWS-designed services over third party.
Anytime you see open source or Kubernetes, think ECS.

=============================== Fargate ===============================
Fargate — это дополнение к ECS, которое позволяет вам запускать контейнеры
без управления серверами.
Can't work alone.
Fargate is a serverless compute engine for docker containers.
You should choose Fargate over EC2 or Lambda for these reasons:
workload consistency, the different requirements of control.

Fargate requires use of ECS or EKS. It is more expensive, but easier
than EC2.

Is good for tasks which longer than Lambda tasks (15 min).

You leverage ECS TaskRoles for assigning IAM Permissions to the
containers

=============================== EventBridge ===============================
Think of EventBridge if you want to trigger an action based on something
that happens in AWS.

Common use case is triggering Lambda.

This is CloudWatch Events successor.
This is the fastest way to respond to things happening in your environment.
You can use a default bus or create a custom.

=============================== Amazon Elastic Container Registry ===============================
Storing custom Docker images.
 - Container Image Storage. AWS-managed container image registry service.
 - Supported formats: Docker images, OCI-images and OCI-compatible artifacts.
 - Lifecycle Policies. Rules defining when to expire and remove unused or older images.
 - Image scanning. Scan or push repository settings allow for identifying software
vulnerabilities in your container images.
 - Tag mutability. Helps prevent image tags from beeng overwritten.
 - Keywords for look for. Questions related to a managed container image registry,
 OCI repositories or image integration with Amazon ECS and Amazon EKS

=============================== using open-source Kubernetes ===============================
Amazon EKS (Elastic Kubernetes Service) — это управляемый сервис, который позволяет запускать,
масштабировать и управлять контейнерными приложениями с использованием Kubernetes.

 - Amazon ECS Anywhere If you need to manage a container-based application on-premises
via an AWS service.
 - Amazon EKS Anywhere. You can run your Kubernetes clusters on-premises while easily maintaining
 AWS best practices.
Open source = Kubernetes.
Look out for questions related to self-managed Kubernetes deployment that are similar
to Amazon EKS.
Use EKS-D when you need to run versioned deployments of clusters outside of AWS-managed
services.

Amazon EKS is based on the EKS Distro, which allows you to leverage the best
practices and established processes on-premises that Amazon EKS uses in AWS.
Distro allows customers to maintain similar operational efficiency to Amazon EKS
and allows you to leverage Amazon EKS Anywhere.
It is managed by you. Including control plane, management and location.

=============================== Aurora Serverless ===============================
 - On-demand, auto scaling version of Aurora database service. Capacity adjusted for you.
 - ACU (Aurora capacity units). Set min and max ACU for scaling needs. Billed per
 second for used resources only.
 - Exam scenarios: variable traffic or workloads, new applications, capacity planning and
development/testing needs

==================================== X-Ray ====================================
 - Application insights. Collects data for gaining insights to application requests
and responses
 - Important terms to know: traces, tracing headers and segments
 - Integrations: EC2, Lambda and API Gateway.
 - Exam scenarios: scenarios involving application insights, viewing response times of
 downstream resources and HTTP response analysis.

==================================== AppSync ====================================
Scalable GraphQL interface for application developers.
Keywords: GraphQL, fetching app data, declarative coding and frontend app data fetching
