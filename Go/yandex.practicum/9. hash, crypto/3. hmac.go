package main

import (
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"fmt"
)

/*
Рассмотрим подписывание данных с использованием ключа.
Предположим, сервер выдаёт новым пользователям токены и пишет их в куки.
При повторном обращении юзера сервер читает куки и идентифицирует пользователя.
Как защититься от генерации и использования токенов третьими лицами?
Одно из решений — подписывать и проверять токены секретным ключом,
который хранится на сервере.

Создадим подпись данных с помощью алгоритма HMAC.
В отличие от обычных хеш-функций, для функции
hmac.New(h func() hash.Hash, key []byte) hash.Hash
нужно указать используемую криптографическую хеш-функцию и ключ.

В данном случае невозможно проверить исходную строку и полученную подпись,
так как случайный ключ исчез после завершения программы.
Чтобы проверить подлинность подписи, нужно сделать две операции:
 - Заново пересчитать подпись с тем же ключом.
 - Функцией hmac.Equal проверить, что подписи совпадают.
*/

func generateRandom(size int) ([]byte, error) {
	// генерируем случайную последовательность байт
	b := make([]byte, size)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}

	return b, nil
}

func main() {
	// подписываемое сообщение
	src := []byte("Видишь гофера? Нет. И я нет. А он есть.")

	// создаём случайный ключ
	key, err := generateRandom(16)
	if err != nil {
		fmt.Printf("error: %v\n", err)
		return
	}

	// подписываем алгоритмом HMAC, используя SHA256
	hasher := hmac.New(sha256.New, key)
	hasher.Write(src)
	dst := hasher.Sum(nil)

	fmt.Printf("%x", dst)
}
