# Изменяя значение атрибута одного экземпляра класса, мы можем изменять сразу все значения
# атрибутов других экземпляров в классе.
# Здесь работает жесткая схема:
class Cat:
    # сразу после объявления класса, еще до создания методов пришем защищенную переменную,
    # которая будет равна словарю, в котором прописываются атрибуты и их значения
    __my_dict = {  # Обязательно должна быть приватная переменная
        'breed': 'pers',
        'color': 'black'
    }

    # далее все это инициализируется.
    def __init__(self):
        self.__dict__ = Cat.__my_dict


a = Cat()
b = Cat()

a.breed = 'siam'
a.name = 'Bob'
a.surname = 'Jonson'

# обратите внимание, что у <b> мы не создавали таких атрибутов как name, surname
# однако они автоматически создались и им присвоилось значение с подобных фтрибутов от <a>
print(b.name)  # Bob
print(b.surname)  # Jonson

# и если поменяем значение атрибута у какого-либо экземпляра класса, то сразу изменится эначение
# этого атрибута у всех других экземпляров класса
a.name = 'John'
a.surname = 'Smith'
print(b.name)  # John
print(b.surname)  # Smith

