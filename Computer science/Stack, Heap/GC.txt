Верно, в Golang (и многих других языках программирования) сборщик мусора (garbage
collector) работает исключительно в области памяти heap. Сборщик мусора в Golang
отслеживает и освобождает неиспользуемые участки памяти, выделенные в heap, но не
в stack.

Вот почему это происходит:

1. **Heap и stack разные области памяти**: Stack и heap - это две разные области
памяти в рамках одного процесса. Stack используется для хранения данных, связанных
с вызовами функций, а heap используется для динамически выделяемых данных, таких
как объекты и структуры данных.

2. **Содержание стека легко управляется**: Стек имеет ограниченный размер и
содержит данные, чьи жизненные циклы легко управляются. Память на стеке
автоматически освобождается, когда функция завершает выполнение, и этот процесс
управления памятью проще и предсказуемее, чем сборка мусора в heap.

3. **Определенная семантика**: В стеке обычно хранятся данные с определенной
семантикой, например, локальные переменные и адреса возврата функций. Эти данные
имеют короткий жизненный цикл и не предназначены для долгосрочного хранения.

Сборка мусора в heap необходима для управления памятью, связанной с динамически
создаваемыми объектами, которые могут иметь неявные ссылки друг на друга. Сборка
мусора в heap позволяет обнаруживать и освобождать неиспользуемые объекты и
предотвращать утечку памяти.

Итак, в Golang сборка мусора применяется только к области heap, а управление
памятью на стеке осуществляется автоматически при вызове функций и завершении
их выполнения.