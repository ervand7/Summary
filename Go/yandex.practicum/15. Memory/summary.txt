1) компилятор сам решит, сохранить ли переменную в стек или в кучу. Если он
увидит, что, например, указатель может потеряться в стеке6 он его сохранит в куче

2) для объектов нулевого размера память не выделяется. Все объекты нулевого
размера будут указывать на один и тот же участок памяти

3) память в go выделяется по классам объектов. Они бывают 4 видов:
 - нулевые
 - крошечные
 - маленькие
 - большие

У крошечных объектов несколько запросов памяти группируются по 16 байт и
потом эта память освобождается разом, когда не остается указателей на всю группу.
Исходник: src/runtime/malloc.go

4) маленькие объекты (от 8 байт до 32 килобайт)
Исходник: src/runtime/sizeclasses.go

5) строка под капотом - это
type stringStruct struct {
	str unsafe.Pointer
	len int
}
Исходник: src/runtime/string.go

6) slice под капотом - это
type slice struct {
	array unsafe.Pointer
	len   int
	cap   int
}
Исходник: src/runtime/slice.go

7) map под капотом - это
src/runtime/map.go 116 строка

8) chan под капотом - это
src/runtime/chan
Тут мы видим, что каналы под капотом используют тот же mutex.
Так что теоретически mutex использовать эффективнее, чем каналы. Но не сильно
