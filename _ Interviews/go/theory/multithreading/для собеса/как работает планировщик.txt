https://www.youtube.com/watch?v=rloqQY9CT8I
 - логика работы планировщика описана в src/runtime/proc.go
 - есть 3 сущности:
     ● P - логический процессор (не железо). Это условный контекст,
    который объединяет поток операционной системы и очередь горутин.
    Кол-во горутин, привязанных к процессору неограниченно.
    У каждого процессора есть своя очередь горутин (runqueue).
    По умолчанию количество процессоров берётся из значения переменной
    среды GOMAXPROCS и равно количеству логических ядер компьютера.
     ● M - тред os. Он закреплён за логическим процессором. Если горутина
    сделала системный вызов и этот вызов заблокировал поток, планировщик
    создаёт дополнительный поток операционной системы
     ● G - горутина

- M и P связаны один к одному
- M может переходить от одного P к другому

 - планировщик использует неявную кооперативную многозадачность
 - планировщик использует очередь FIFO
 - M работает по принципу "захвата чужой работы" чтобы ядра не простаивали
 - М работает "неинвазивно". То есть он не будет прерывать работу горутины,
 которая делает большое вычисление
 - планировщик не настраивает приоритетность горутин. Все идет по FIFO
 - планировщик не дает гарантий точного времени выполнения горутин