 ## 🧩 1. **B-Tree (default)**

**Usage:**
Most common and general-purpose index.

**Best for:**

* `=` equality
* `<`, `>`, `BETWEEN`, `IN` range conditions
* `ORDER BY`, `GROUP BY`, and `JOIN`

**Example:**

```sql
CREATE INDEX idx_users_email ON users(email);
```

**Notes:**

* Supports **Index Scan**, **Index Only Scan**, **Bitmap Index Scan**
* Sorted, balanced, and fast (O(log n))
* Can be **multi-column** and **covering (INCLUDE)**

💡 As a senior dev — *this is your bread and butter.*

---

## ⚙️ 2. **Hash Index**

**Usage:**
For **equality only** (`=`).

**Example:**

```sql
CREATE INDEX idx_users_id_hash ON users USING hash(id);
```

**Pros:**

* Slightly faster than B-Tree for pure equality lookups.
  **Cons:**
* No ordering or range queries.
* No bitmap or index-only scans.

💡 Rarely used — only for *massive equality lookups* where B-Tree overhead matters.

---

## 🧠 3. **GIN (Generalized Inverted Index)**

**Usage:**
For **arrays**, **JSONB**, and **full-text search**.

**Best for:**

* `@>` (contains), `<@`, `?`, `?|`, `?&`
* `to_tsvector()` text search
* `jsonb_path_ops`

**Examples:**

```sql
CREATE INDEX idx_docs_tags ON docs USING gin(tags);
CREATE INDEX idx_posts_text ON posts USING gin(to_tsvector('english', content));
```

**Notes:**

* Great for documents, search, metadata.
* Supports multiple values per row.
* Slower to update (more overhead on writes).

💡 Essential if you work with JSONB, logs, or search.

---

## 🌍 4. **GiST (Generalized Search Tree)**

**Usage:**
For **ranges**, **geospatial**, and **similarity search**.

**Best for:**

* `point`, `polygon`, `box`, `range` types
* `earthdistance`, `cube`, PostGIS

**Example:**

```sql
CREATE INDEX idx_locations ON locations USING gist(geom);
```

💡 Used for “nearest-neighbor” or *geometry-like* queries.
(e.g., find users within 10 km)

---

## 💽 5. **BRIN (Block Range Index)**

**Usage:**
For **very large tables** where data is naturally ordered.

**Best for:**

* Time-series data (logs, events, metrics)
* Columns with sequentially increasing values (e.g., `created_at`, `id`)

**Example:**

```sql
CREATE INDEX idx_logs_created_at ON logs USING brin(created_at);
```

**Pros:**

* Tiny (KB instead of GB).
* Summarizes value ranges per block.
  **Cons:**
* Not precise — needs recheck from heap.

💡 Use when table has **billions of rows** and append-only inserts.

---

## ⚙️ 6. **SP-GiST (Space-Partitioned GiST)**

**Usage:**
For **disjoint data**, like IP ranges or hierarchical values.

**Example:**

```sql
CREATE INDEX idx_networks ON networks USING spgist(cidr);
```

**Pros:**

* Very fast for non-overlapping data.
  **Cons:**
* Niche use cases.

💡 Useful if you work with **CIDR networks** or **text prefixes**.

---

## 🧩 7. **Bloom Index** (extension)

**Usage:**
Special probabilistic index for many columns.

**Example:**

```sql
CREATE EXTENSION bloom;
CREATE INDEX idx_bloom_multi ON users USING bloom(col1, col2, col3);
```

**Pros:**

* Compact, supports multi-column equality.
  **Cons:**
* Occasional false positives (requires recheck).

💡 Handy for analytics tables with dozens of filterable columns.

---

## 📘 Summary Table

| Index Type  | Supports Range? | Supports Equality? | Ordered? | Typical Use                |
| ----------- | --------------- | ------------------ | -------- | -------------------------- |
| **B-Tree**  | ✅               | ✅                  | ✅        | General-purpose (default)  |
| **Hash**    | ❌               | ✅                  | ❌        | Pure equality lookups      |
| **GIN**     | ❌               | ✅                  | ❌        | JSONB, arrays, text search |
| **GiST**    | ✅               | ✅                  | ✅        | Geospatial, ranges         |
| **SP-GiST** | ✅               | ✅                  | ✅        | Prefix / disjoint data     |
| **BRIN**    | ✅               | ✅                  | ✅        | Huge time-ordered tables   |
| **Bloom**   | ❌               | ✅ (approx.)        | ❌        | Multi-column filters       |

---

### 🧠 As a Senior Go Dev, You Should Know:

1. **B-Tree** — default; understand index scans & multi-column behavior.
2. **GIN** — JSONB, text search, arrays.
3. **BRIN** — massive sequential data (time-series).
4. **GiST** — geolocation or ranges.
5. **Hash** — rare, equality only.
