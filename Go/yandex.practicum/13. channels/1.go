package main

/*
В прошлом уроке вы узнали о мьютексах и переменных состояния.
В Go есть абстракция, которая объединяет эти два примитива в один, — каналы.
Каналы позволяют отправлять значения определённого типа из одной горутины в другую.
Создать канал можно функцией make.
*/

/*
Изучите синтаксис каналов:
ch := make(chan int) // создать канал, состоящий из значений типа int

ch <- v // отправить значение в канал

v := <-ch // получить значение из канала
// если канал пуст, горутина заблокируется и будет ждать,
// пока с другой стороны канала другая горутина не положит значение в этот канал

// если получаемое значение не важно, то можно использовать такую запись
<-ch
*/

import "fmt"

func sum(s []int, ch chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	ch <- sum // отправляем результат в канал
}

func main() {
	s := []int{7, 2, 8, -9, 4, 0}
	ch := make(chan int)

	go sum(s[:len(s)/2], ch) // запускаем две горутины, которые суммируют
	// левую и правую половины списка параллельно
	go sum(s[len(s)/2:], ch)

	x, y := <-ch, <-ch // ждём значения из канала
	// когда они готовы, сохраняем их в переменные x и y

	fmt.Println(x, y, x+y)
}
