#            1                                        10
#      2             3          or               8             9
#   4    5        6    7                      4    5        6    7

# Binary heap, или куча, представляет собой структуру данных, представленную
# в виде бинарного дерева, в которой каждый узел более или равен своим дочерним
# узлам. Binary heap может быть представлен как мин-куча (min-heap), где значение
# в корне минимально среди всех элементов кучи, или как макс-куча (max-heap),
# где значение в корне максимально.
#
# Преимущества Binary Heap:
#
# 1. Эффективность при извлечении минимального (максимального) элемента: Извлечение
# минимального (максимального) элемента из кучи выполняется за O(1) времени. Это
# полезно, например, при поиске наименьшего (наибольшего) элемента в наборе данных.
#
# 2. Эффективность при вставке: Вставка элемента в binary heap также быстро
# выполняется, за O(log n) времени, где n - это количество элементов в куче. Это
# позволяет поддерживать структуру данных в актуальном состоянии.
#
# 3. Использование в алгоритмах: Binary heap используется в различных алгоритмах,
# таких как алгоритмы сортировки (например, heapsort), алгоритмы нахождения
# кратчайшего пути в графах (например, алгоритм Дейкстры), а также в некоторых
# реализациях приоритетных очередей.
#
# 4. Простая реализация: Binary heap может быть реализован в виде массива данных,
# что делает его структурой данных с простой структурой и эффективными операциями.
#
# Binary Heap является важной структурой данных в компьютерной науке и используется
# во многих приложениях, где требуется быстрый доступ к минимальному (максимальному)
# элементу или реализация алгоритмов, опирающихся на приоритеты.

# Да, Python предоставляет встроенный модуль `heapq`, который реализует мин-кучу
# (min-heap) на основе списка. С помощью `heapq` вы можете выполнять операции
# вставки и извлечения минимального элемента в списке с временной сложностью O(log n),
# где n - это количество элементов в куче.
#
# Вот пример использования `heapq` для создания мин-кучи и выполнения некоторых
# операций:

import heapq

# Создаем пустую мин-кучу
heap = []

# Вставляем элементы
heapq.heappush(heap, 3)
heapq.heappush(heap, 1)
heapq.heappush(heap, 4)
heapq.heappush(heap, 2)

# Извлекаем минимальный элемент
min_element = heapq.heappop(heap)
print(min_element)  # Вывод: 1

# Выполняем сортировку с использованием мин-кучи
unsorted_list = [3, 1, 4, 2]
heapq.heapify(unsorted_list)
sorted_list = [heapq.heappop(unsorted_list) for _ in range(len(unsorted_list))]
print(sorted_list)  # Вывод: [1, 2, 3, 4]

# Обратите внимание, что в `heapq` реализована мин-куча. Если вам нужно создать
# макс-кучу, вы можете изменить знаки элементов или использовать другие решения,
# например, предварительно инвертировать значения при вставке в кучу.
