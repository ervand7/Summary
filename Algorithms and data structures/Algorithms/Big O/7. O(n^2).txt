Сложность O(n^2) означает, что время выполнения операций увеличивается квадратично по
отношению к размеру входных данных (n). Вот несколько видов операций с такой сложностью:

1. **Сортировка вставками (Insertion Sort)**: В этом алгоритме каждый элемент вставляется
в отсортированную часть массива. Время выполнения составляет O(n^2).

2. **Сортировка выбором (Selection Sort)**: Алгоритм постепенно выбирает минимальный
(или максимальный) элемент из несортированной части массива и перемещает его в
отсортированную часть. Время выполнения также O(n^2).

3. **Сортировка пузырьком (Bubble Sort)**: В этом алгоритме соседние элементы поочередно
сравниваются и, если они находятся в неправильном порядке, меняются местами. Этот
алгоритм также имеет сложность O(n^2).

4. **Матричное умножение (Matrix Multiplication)**: Умножение двух матриц размера NxN
требует O(n^2) операций. Это также является примером операции с квадратичной сложностью.

5. **Поиск всех комбинаций в массиве**: Если алгоритм ищет и/или генерирует все
возможные комбинации элементов в массиве, это может иметь сложность O(n^2) или более,
в зависимости от точных операций, выполняемых с комбинациями.

6. **Проверка всех пар элементов в массиве**: Если алгоритм проверяет все пары
элементов в массиве и выполняет какие-либо операции с ними, это может иметь
сложность O(n^2).

7. **Алгоритмы, использующие вложенные циклы**: Любой алгоритм с двумя или более
вложенными циклами, где каждый цикл выполняется n раз, будет иметь сложность O(n^2).

Операции с квадратичной сложностью обычно не эффективны на больших объемах данных
и могут быть оптимизированы с помощью более эффективных алгоритмов для решения задачи.