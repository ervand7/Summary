## Взаимодействие компонентов Kafka
### 1. **ZooKeeper**

- **Роль**: Внешний сервис для координации и хранения состояния кластера Kafka.
- **Функции**:
  - Хранит информацию о конфигурации брокеров, топиков и партиций.
  - Синхронизирует разные инстансы Kafka.
  - Участвует в выборе контроллера кластера (Kafka Controller).
- **Взаимодействие**:
  - Брокеры регистрируются в ZooKeeper при запуске.
  - Kafka Controller использует ZooKeeper для отслеживания изменений в кластере.

### 2. **Kafka Brokers (Брокеры)**

- **Роль**: Серверы, принимающие, хранящие и выдающие сообщения.
- **Функции**:
  - Хранят топики и их партиции.
  - Обеспечивают репликацию данных для надёжности.
- **Взаимодействие**:
  - Принимают сообщения от продюсеров и записывают их в соответствующие партиции.
  - Предоставляют сообщения консюмерам по запросу.
  - Синхронизируются между собой для обеспечения согласованности данных.

### 3. **Kafka Controller**

- **Роль**: Специальный брокер, отвечающий за управление состоянием кластера.
- **Функции**:
  - Назначает лидеров партиций (Leader Replicas).
  - Отслеживает состояние брокеров и партиций.
- **Взаимодействие**:
  - Выбирается из числа брокеров с помощью ZooKeeper.
  - Координирует репликацию и перераспределение партиций в случае сбоев.

### 4. **Producer (Продюсер)**

- **Роль**: Отправляет сообщения в Kafka.
- **Функции**:
  - Формирует сообщения с ключами, значениями, таймстемпами и заголовками.
  - Использует ключи для распределения сообщений по партициям.
- **Настройки подтверждений (`acks`)**:
  - `0`: Не ждёт подтверждения от брокера.
  - `1`: Ждёт подтверждения от лидера реплики.
  - `all` или `-1`: Ждёт подтверждения от всех синхронизированных реплик (ISR).

### 5. **Consumer (Консьюмер)**

- **Роль**: Потребляет сообщения из Kafka.
- **Функции**:
  - Читает сообщения из топиков и партиций.
  - Отслеживает смещения (offsets) для каждого сообщения.
- **Consumer Group**:
  - Группа консюмеров, позволяющая параллельно обрабатывать сообщения.
  - Каждый консюмер в группе отвечает за свою партицию.
  - При падении консюмера его партиции перераспределяются между оставшимися.

### 6. **Топики и Партиции**

- **Топик**: Логическое название потока сообщений.
- **Партиция**:
  - Физическое разделение топика для масштабирования и параллельной обработки.
  - Сообщения внутри партиции упорядочены по принципу FIFO (First-In-First-Out).
- **Взаимодействие**:
  - Продюсеры отправляют сообщения в топик, которые распределяются по партициям.
  - Консьюмеры читают сообщения из партиций, следуя порядку.

### 7. **Репликация и ISR (In-Sync Replicas)**

- **Репликация**:
  - Обеспечивает надёжность данных путём хранения копий партиций на разных брокерах.
  - Количество реплик настраивается и обычно составляет минимум 2.
- **Leader и Follower Replicas**:
  - **Leader Replica**: Основная реплика партиции, обрабатывающая чтение и запись.
  - **Follower Replicas**: Синхронизируются с лидером и могут стать новым лидером при его сбое.
- **ISR (In-Sync Replicas)**:
  - Набор реплик, которые синхронизированы с лидером.
  - Параметр `min.insync.replicas` определяет минимальное количество ISR для подтверждения
  записи.

### 8. **Лог-файлы и хранение данных**

- **Структура хранения**:
  - Каждый топик разбит на партиции, каждая партиция хранится в виде лог-файлов на диске.
  - Лог-файлы включают:
    - `.log`: Сами данные сообщений.
    - `.index`: Индексы для быстрого доступа по оффсету.
    - `.timestamp`: Соответствие между временными метками и оффсетами.
- **Удаление данных**:
  - Данные удаляются автоматически по истечении TTL (Time-To-Live).
  - Удаление происходит на уровне сегментов лог-файлов, а не отдельных сообщений.

### 9. **Отслеживание смещений (`__consumer_offsets`)**

- **Топик `__consumer_offsets`**:
  - Системный топик, где Kafka хранит информацию о смещениях для каждого консюмера и партиции.
  - Позволяет консюмерам возобновлять чтение с правильного места после перезапуска.

### 10. **Поток данных и взаимодействие компонентов**

- **Продюсер отправляет сообщения** в брокер, используя ключи для определения партиции.
- **Брокер (лидер партиции)** сохраняет сообщение и синхронизирует его с ISR-фолловерами.
- **Консьюмеры в группе** получают сообщения из партиций, за которые они отвечают.
- **Если консюмер падает**, Kafka перераспределяет его партиции другим консюмерам в группе.
- **Kafka Controller** следит за состоянием брокеров и при необходимости переназначает
лидеров партиций.

---

## Суммарное представление взаимодействий:

1. **Продюсеры** отправляют сообщения в **брокеры**, которые являются лидерами соответствующих
партиций.
2. **Брокеры** сохраняют сообщения и реплицируют их на **фолловер-реплики** для надёжности.
3. **Консьюмеры** читают сообщения из брокеров, используя свои смещения из `__consumer_offsets`.
4. **Consumer Groups** позволяют распределять нагрузку между консюмерами и обеспечивают
отказоустойчивость.
5. **ZooKeeper** координирует работу кластера, поддерживает информацию о брокерах и помогает
в выборе **Kafka Controller**.
6. **Kafka Controller** управляет назначением лидеров партиций и следит за состоянием реплик.
