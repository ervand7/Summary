package main

import (
	"fmt"
	"sync"
	"time"
)

/*
В пакете sync есть функции для работы с горутинами и примитивы синхронизации.
Если вы запустили несколько параллельных горутин и хотите в основной
функции дождаться выполнения их всех, можно сделать это с помощью
переменной типа sync.WaitGroup. Она содержит счётчик горутин,
завершения которых нужно ждать.

Функционал WaitGroup очень прост и состоит всего из трёх методов:
(*WaitGroup) Add(delta int) — изменить значение счётчика на указанную величину;
(*WaitGroup) Done() — уменьшить значение счётчика на единицу;
(*WaitGroup) Wait() — ожидать, когда значение счётчика будет равно нулю.
*/

func main() {
	var wg sync.WaitGroup
	const n = 5

	for i := 0; i < n; i++ {
		wg.Add(1) // инкрементируем счётчик, сколько горутин нужно подождать

		go func(i int) {
			time.Sleep(2 * time.Second)
			fmt.Printf("hi %d\n", i)
			// уменьшаем счётчик, когда горутина завершает работу
			wg.Done()
		}(i)
	}

	wg.Wait() // ждём все горутины
	fmt.Println("Всё готово")
}
