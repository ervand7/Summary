Переполнение стека (stack overflow) происходит, когда стек, предназначенный для хранения
данных о вызовах функций и локальных переменных, заполняется до того предела, когда больше
нельзя размещать новые фреймы стека. Это может произойти, когда программа или функция
рекурсивно вызывает себя слишком глубоко или когда функции вызываются слишком много раз
без завершения.

В Go, как и в большинстве других языков, переполнение стека может привести к аварийному
завершению программы с сообщением об ошибке "stack overflow". Вот пример программы на Go,
который приводит к переполнению стека:

```go
package main

func recursiveFunction(i int) {
    if i > 0 {
        recursiveFunction(i - 1)
    }
}

func main() {
    recursiveFunction(10000) // Рекурсивный вызов функции с большой глубиной
}
```

В этом примере функция `recursiveFunction` вызывает саму себя с уменьшающимся значением `i`.
В результате функция будет рекурсивно вызываться 10 000 раз, что приведет к переполнению стека.

Чтобы избежать переполнения стека в подобных ситуациях, можно использовать итеративные
подходы или оптимизировать рекурсивные функции. Также в Go можно увеличить размер стека,
используя опции среды выполнения, но это требует аккуратности, так как это может увеличить
потребление памяти программой.