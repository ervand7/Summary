### ✅ Ресурсы, которые выделяются горутине:

1. **Собственный стек**
   * Изначально очень маленький — около **2 KB**
   * **Динамически растёт** (в отличие от потоков ОС, где стек фиксированный)
   * Используется для хранения **локальных переменных** и **адресов возврата**

2. **Внутренние структуры планировщика Go**
   * Планировщик (M\:N scheduler) управляет:
     * `G` (goroutine) — сама горутина
     * `M` (machine) — поток ОС
     * `P` (processor) — логическая сущность, к которой привязан M
   * Каждая горутина — это объект `G`, который содержит:
   type g struct {
        stack       stack   // указатели на стек (lo, hi)
        status      uint32  // состояние: runnable, waiting, etc.
        goid        int64   // ID горутины (внутренний)
        sched       gobuf   // контекст выполнения (pc, sp и т.п.)
        panic       *panic  // паника, если произошла
        defer       *defer  // отложенные вызовы
        ...
    }

3. **Контекст выполнения (в рамках Go runtime)**
   * Это не `context.Context`, а внутренние данные рантайма, помогающие трекать состояние
   и работу горутины (например, в трейсинге)
