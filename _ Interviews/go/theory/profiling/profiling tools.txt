Для профилирования программ на Go я использую несколько инструментов в зависимости от задачи:

1. **pprof**: Это встроенный инструмент для профилирования CPU, памяти, блокировок и горутин.
Я использую его для создания профилей, которые затем анализирую с помощью `go tool pprof`.

2. **go tool pprof**: Это инструмент командной строки для анализа профилей, созданных с помощью
pprof. Он предоставляет детальную информацию о горячих точках и узких местах в программе.

3. **Go Trace**: Этот инструмент я использую для анализа трассировок выполнения, что помогает
понять взаимосвязь и последовательность событий в программе.

4. **pprof web interface**: Веб-интерфейс для pprof позволяет визуализировать данные профилирования
и удобно анализировать их через браузер. Я включаю его в приложение для более детального анализа.

5. **delve**: Это мощный инструмент для отладки и профилирования программ на Go. Он поддерживает
интерактивные сессии и позволяет глубоко анализировать выполнение программы.

6. **Go Performance Monitoring (Prometheus + Grafana)**: Я использую Prometheus для сбора метрик
производительности и Grafana для их визуализации. Это помогает отслеживать состояние приложения
в реальном времени и быстро реагировать на проблемы.

Эти инструменты помогают мне эффективно выявлять и устранять узкие места в производительности
программ на Go.


### Инструменты для профилирования Go-программ:

1. **pprof**:
   - **Описание**: Встроенный профилировщик Go, который предоставляет информацию о профилировании
   CPU, памяти, блокировок, горутин и других аспектов.
   - **Пример использования**:
     ```go
     import (
         "runtime/pprof"
         "os"
     )

     func main() {
         f, err := os.Create("cpu.prof")
         if err != nil {
             log.Fatal(err)
         }
         pprof.StartCPUProfile(f)
         defer pprof.StopCPUProfile()

         // Ваш код здесь
     }
     ```

2. **go tool pprof**:
   - **Описание**: Инструмент командной строки для анализа профилей, созданных с помощью pprof.
   - **Пример использования**:
     ```bash
     go tool pprof cpu.prof
     ```

3. **Go Trace**:
   - **Описание**: Инструмент для анализа трассировок, который предоставляет информацию о
   времени выполнения и взаимосвязи событий в программе.
   - **Пример использования**:
     ```bash
     go test -trace trace.out
     go tool trace trace.out
     ```

4. **pprof web interface**:
   - **Описание**: Веб-интерфейс для анализа профилей, который позволяет визуализировать
   данные профилирования.
   - **Пример использования**:
     ```go
     import (
         "net/http"
         _ "net/http/pprof"
     )

     func main() {
         go func() {
             log.Println(http.ListenAndServe("localhost:6060", nil))
         }()

         // Ваш код здесь
     }
     ```

5. **delve**:
   - **Описание**: Инструмент для отладки и профилирования программ на Go, который поддерживает
   интерактивные сессии.
   - **Установка**: `go install github.com/go-delve/delve/cmd/dlv@latest`
   - **Пример использования**:
     ```bash
     dlv debug --headless --listen=:2345 --api-version=2 --accept-multiclient
     ```

6. **Go Performance Monitoring (Prometheus + Grafana)**:
   - **Описание**: Интеграция с Prometheus для сбора метрик производительности и использование
   Grafana для их визуализации.
   - **Пример использования**:
     ```go
     import (
         "github.com/prometheus/client_golang/prometheus"
         "github.com/prometheus/client_golang/prometheus/promhttp"
         "net/http"
     )

     func main() {
         http.Handle("/metrics", promhttp.Handler())
         log.Fatal(http.ListenAndServe(":2112", nil))
     }
     ```
