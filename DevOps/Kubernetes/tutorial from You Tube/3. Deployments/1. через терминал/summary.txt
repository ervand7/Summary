 ● minikube start
 ● kubectl create deployment first-deployment --image ervand7/k8s_explore:simple_flask

 ● kubectl get deploy
видим все наши деплойменты

 ● kubectl get pods
видим, что теперь бежит под с именем деплоймента

 ● kubectl describe deployment first-deployment
получаем описание деплоймента

 ● kubectl scale deployment first-deployment --replicas 4
скейлим наш деплоймент

 ● kubectl get pods
видим, что теперь у нас бежит 4 пода

 ● kubectl get rs
получаем replica set, который автоматически создался

 ● kubectl delete pods first-deployment-5db79c498-kj778
удаляем один из подов и видим
 ● kubectl get pods
что появился новый

 ● kubectl autoscale deployment first-deployment --min=4 --max=6 --cpu-percent=80
запускаем автоскейлинг, где будет минимум 4, максимум 6 подов.
cpu нагрузка всех подов будет равна 80%

 ● kubectl get hpa
hpa - horizontal pod autoscaler

 ● kubectl rollout history deployment/first-deployment
 ● kubectl rollout status deployment/first-deployment
смотрим историю и статус нашего деплоймента

 ● kubectl set image deployment/first-deployment k8s-explore-j7j7q=ervand7/k8s_explore:simple_flask --record
меняем image внутри деплоймента. У нас есть контейнер k8s-explore-dts8r, и мы поместили
в него наш нужный image
 ● kubectl set image deployment/first-deployment k8s-explore-dts8r=nginx:latest --record
меняем image внутри деплоймента на nginx:latest
 ● kubectl rollout undo deployment/first-deployment
делаем rollback на предыдущую версию (ervand7/k8s_explore:simple_flask)

 ● kubectl rollout history deployment/first-deployment
 ● kubectl rollout undo deployment/first-deployment --to-revision=2
смотрим историю версий и перемещаемся на определенную версию

 ● kubectl rollout restart deployment/first-deployment
рестартуем. При этом для деплоя будет автоматически браться самая последняя версия

 ● kubectl delete deployment --all
