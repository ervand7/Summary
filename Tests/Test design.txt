Источник: https://www.simbirsoft.com/blog/tekhniki-test-dizayna-i-ikh-prednaznachenie/
Типы тестирования:

 ● Статическое тестирование, как следует из названия, не требует запускать программу
или приложение и позволяет находить самые очевидные ошибки еще на ранних этапах
создания продукта. Например, частью статического тестирования является проверка
параметров ПО на соответствие требованиям технического задания, вычитка кода.

 ● Динамическое тестирование требует проверять ПО в действии. Этот вид, в свою очередь,
также делится на две обширные группы:
    1) Техники белого ящика (они же структурное тестирование) применяют в том случае,
    если специалист хорошо знает архитектуру продукта, его код, «начинку» – то есть может
    ориентироваться в самой программе.

    2) Техники черного ящика позволяют проверять работу продукта, не зная внутреннего
    устройства системы.  При этом тестирование проводится на основе требований,
    указанных в спецификации проекта или в ТЗ.

    3) Техники серого ящика позволяют тестировать продукт, когда специалист частично знает
    его внутреннее устройство. Для выполнения тестирования «серого ящика» не нужен
    доступ к исходному коду.

__________________________________________________________________________________
Этапы тестирования:

1. Подготовка. На этом этапе QA-инженер читает проектную документацию, выясняет требования
к продукту, прорабатывает план, продумывает стратегию, расставляет задачи по приоритетности
и анализирует возможные риски.

2. Непосредственно тестирование. Предварительно специалисты анализируют собранную ранее
информацию, составляют список тестируемых функций, знакомятся с уже известными
багами, если они есть, пишут тест-кейсы.

3. Анализ результатов и составление отчетов.
При работе над созданием тестов QA-специалист ориентируется не только на документацию,
но и на устные сведения от других QA, аналитиков, разработчиков, менеджеров проекта.

__________________________________________________________________________________
Техники тест-дизайна

 ● Эквивалентное разбиение
Метод эквивалентного разбиения позволяет минимизировать число тестов, не создавая
сценарий для каждого возможного значения, а выбрав только одно значение из целого класса и
приняв за аксиому, что для всех значений в данной группе результат будет аналогичным.

 ● Граничные значения
Техника граничных значений основана на предположении, что большинство ошибок может
возникнуть на границах эквивалентных классов.

 ● Таблица принятия решений
Какие возможны сценарии:
1.       Правильный логин и правильный пароль.
2.       Правильный логин, неправильный пароль.
3.       Неправильный логин, правильный пароль.
4.       Неправильный логин, неправильный пароль.

 ● Попарное тестирование
Суть этого метода, также известного как pairwise testing, в том, что каждое значение
каждого проверяемого параметра должно быть протестировано на взаимодействие с каждым
значением всех остальных параметров. После составления такой матрицы мы убираем тесты,
которые дублируют друг друга, оставляя максимальное покрытие при минимальном необходимом
наборе сценариев.
№	Браузер	       Операционная система	    Язык
1	Opera	       Windows	                RU
2	Google Chrome  Linux	                RU
3	Opera	       Linux	                EN
4	Google Chrome  Windows              	EN


 ● Причина и следствие
Простая проверка базовых действий и их результата. Например, если нажать крестик в правом
верхнем углу окна (причина), оно закроется (следствие), и т.д. Этот метод позволяет
проверить все возможности системы, а также обнаружить баги и улучшить техническую
документацию продукта.

 ● Предугадывание ошибок
Например, в спецификации указано, что поле должно принимать код из четырех цифр.
В числе возможных тестов:
Что произойдет, если не ввести код?
Что произойдет, если не ввести спецсимволы?
Что произойдет, если ввести не цифры, а другие символы?
Что произойдет, если ввести не четыре цифры, а другое количество?