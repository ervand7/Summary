# Задача о рюкзаке (Knapsack problem).
# У вас есть рюкзак, который может вместить ограниченный вес. У каждого
# предмета есть свой вес и стоимость. Необходимо определить, какие предметы
# взять в рюкзак так, чтобы их суммарная стоимость была максимальной, при
# условии, что общий вес не превышает заданный лимит.


def knapsack_max_value(weights, values, capacity):
    n = len(weights)
    # Создаем матрицу для хранения максимальной стоимости для каждого веса и предмета
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for j in range(capacity + 1):
            # Если текущий предмет можно взять
            if weights[i - 1] <= j:
                # Максимизируем стоимость, выбирая максимум между взятием и не взятием предмета
                dp[i][j] = max(dp[i - 1][j], values[i - 1] + dp[i - 1][j - weights[i - 1]])
            else:
                # Если предмет не влезает в рюкзак, копируем значение из предыдущей строки
                dp[i][j] = dp[i - 1][j]

    return dp[n][capacity]


# Пример использования
weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
capacity = 5

result = knapsack_max_value(weights, values, capacity)
print("Максимальная стоимость рюкзака:", result)
# Максимальная стоимость рюкзака: 7

# В этом примере `weights` представляет вес каждого предмета, `values` - их стоимость,
# а `capacity` - вместимость рюкзака. Функция `knapsack_max_value` возвращает
# максимальную стоимость предметов, которые можно поместить в рюкзак.
