На моей прошлой работе мы использовали Prometheus и Grafana для мониторинга и
измерения производительности наших микросервисов. Средний показатель RPS для наших
сервисов составлял около 500-1000 запросов в секунду при обычной нагрузке. В
пиковые моменты, например, во время маркетинговых кампаний, показатель RPS мог
доходить до 1500 запросов в секунду. Мы регулярно проводили нагрузочное тестирование
с помощью Locust, чтобы убедиться в устойчивости системы при высоких нагрузках.


Показатель "RPS" (Requests Per Second, запросы в секунду) — это метрика
производительности, которая измеряет количество запросов, обрабатываемых
микросервисом за одну секунду. На собеседованиях важно понимать, что такое RPS, как
его измерять и как интерпретировать результаты.

### Пример ответа на собеседовании:

#### Что такое RPS?
"RPS (Requests Per Second) — это метрика производительности, которая показывает,
сколько запросов микросервис обрабатывает за одну секунду. Она помогает оценить
пропускную способность и производительность сервиса."

#### Как измерять RPS?
"Для измерения RPS можно использовать различные инструменты мониторинга и тестирования
нагрузки. Вот несколько методов и инструментов:

1. **Инструменты мониторинга**:
   - **Prometheus + Grafana**: Prometheus собирает метрики, а Grafana визуализирует
   их. Можно настроить метрику `http_requests_total` для отслеживания количества
   запросов и затем вычислить RPS.
   - **New Relic, Datadog, Zabbix**: Коммерческие решения для мониторинга, которые
   предоставляют готовые метрики, включая RPS.

2. **Тестирование нагрузки**:
   - **Apache JMeter**: Инструмент для нагрузки, который позволяет симулировать
   множество запросов к вашему сервису и измерять RPS.
   - **Locust**: Питон-библиотека для нагрузочного тестирования, которая позволяет
   писать сценарии для тестирования производительности.
   - **Gatling**: Инструмент для нагрузочного тестирования на Scala, который также
   может измерять RPS.

#### Пример подсчета RPS с Prometheus и Grafana:
1. Настройка Prometheus для сбора метрик:
   ```yaml
   scrape_configs:
     - job_name: 'my_microservice'
       static_configs:
         - targets: ['localhost:8000']
   ```

2. Инструментирование вашего кода для сбора метрик:
   ```python
   from prometheus_client import Counter, start_http_server

   REQUEST_COUNT = Counter('http_requests_total', 'Total number of HTTP requests')

   def handle_request(request):
       REQUEST_COUNT.inc()
       # Обработка запроса
       return response

   if __name__ == '__main__':
       start_http_server(8000)
       # Запуск приложения
   ```

3. Настройка Grafana для визуализации метрик:
   - Создайте новый дашборд в Grafana.
   - Добавьте панель с запросом:
     ```promql
     rate(http_requests_total[1m])
     ```
   - Этот запрос показывает среднее количество запросов в секунду за последнюю минуту.

#### Интерпретация RPS:
- Высокий RPS может указывать на хорошую производительность, но также может потребовать
проверки, чтобы убедиться, что нет проблем с латентностью или ошибками.
- Низкий RPS может указывать на узкие места или необходимость оптимизации.

Если на вашем прошлом месте работы использовались конкретные инструменты, стоит упомянуть
их и описать, как именно они помогли измерить и анализировать RPS."

### Пример ответа на собеседовании:
"На моей прошлой работе мы активно использовали Prometheus и Grafana для мониторинга
производительности наших микросервисов. Мы настроили метрики для отслеживания количества
запросов, и с помощью Grafana визуализировали RPS. Для подсчета RPS мы использовали
следующий запрос в Grafana: `rate(http_requests_total[1m])`, который показывал среднее
количество запросов в секунду за последнюю минуту. Это помогало нам оперативно
отслеживать изменения в нагрузке и выявлять узкие места."
