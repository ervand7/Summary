tutorial: https://www.youtube.com/playlist?list=PL0lO_mIqDDFXcxN3fRjc-EOWZLqW8dLVV
documentation: https://docs.mongodb.com/manual/reference/operator/aggregation/and/
__________________________________________________________________________________________________________
Установка mongo на комп. У меня mongoDB таким образом установился только на iMac с ОС Каталина. И работа через терминал успешно
идет только на iMac. На макбуке работаю только через библиотеку pymongo (см конспект в текущей директории).
● xcode-select --install
● brew tap mongodb/brew
● brew tap | grep mongodb
● brew install mongodb-community@4.4
● brew services start mongodb-community@4.4
● mongo --version
● mongo --host localhost:27017
● Этот пункт под вопросом: далее нужно на Macintosh HD создать data/db и дать все права https://www.youtube.com/watch?v=j5tHVw055bs&t=325s
● далее скачиваем и устанавливаем MongoDB Compass

удалить монго:
● brew uninstall mongodb-community@4.4

__________________________________________________________________________________________________________
Запуск через Docker (более предпочтительно): https://stackoverflow.com/questions/32944729/how-to-start-a-mongodb-shell-in-docker-container
● docker pull mongo
● docker run --name CONTAINERNAME --restart=always -d -p 8080:8080 mongo mongod --auth
● docker exec -i -t CONTAINERNAME sh
● mongo
● use admin
● db.createUser({user:"user", pwd:"password", roles:[{role:"root", db:"admin"}]})
● exit
● mongo -u "user" -p "password" HOSTIP --authenticationDatabase "admin"
__________________________________________________________________________________________________________

создадим БД "itproger" и сразу переключимся в нее
● use itproger

создадим коллекцию (таблицу) users
● db.createCollection("users")

создадим коллекцию articles
● db.createCollection("articles")

удалим коллекцию articles
● db.articles.drop()

вставляем одно значение
● db.users.insertOne(
{"name":"John",
"email":"test@mail.ru",
"age":23,
"hasCar":true,
"favColors":["Зеленый","Красный"]
}
)


вставляем несколько значений
● db.users.insertMany(
[
{"name":"Ivan",
"email":"test2@mail.ru",
"age":23,
"hasCar":true,
"favColors":["<Белый>","Желтый"]
},
{"name":"Vasya",
"email":"test3@mail.ru",
"age":23,
"hasCar":true,
"favColors":["Голубой","Желтый"]
}
]
)

прописываем, что мы хотим работать с БД users. Пробуем найти все наши записи
● db.users.find()

выводим первые 2 записи
● db.users.find().limit(2)

избавляемся от вывода _id. Ставим лимит
● db.users.find({}, {_id: 0}).limit(2)

сортируем в порядке возрастания по колонке "age"
● db.users.find({}, {_id: 0}).sort({age: 1})

сортируем в порядке убывания по колонке "age"
● db.users.find({}, {_id: 0}).sort({age: -1})

сортируем по нескольким полям. Изначально сортируем по age. Но если в age будут одинаковые значения, то уже сортируем по email
● db.users.find({}, {_id: 0}).sort({age: 1, email: 1})

выводим всех пользователей, у которых поле age будет равно 22
● db.users.find({age: 22}, {_id:0})

выводим всех пользователей, у которых поле age будет равно 22 и email будет равен "qwerty@qwerty.ru"
● db.users.find({age: 22, email: "qwerty@qwerty.ru"}, {_id:0})

логика или. Выводим всех пользователей, у которых либо поле age будет равно 22, либо email будет равен "qwerty@qwerty.ru"
● db.users.find({$or: [{age: 22}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

ищем все записи, у которых поле age будет < 38
● db.users.find({$or: [{age: {$lt: 38}}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

ищем все записи, у которых поле age будет > 38
● db.users.find({$or: [{age: {$gt: 38}}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

ищем все записи, у которых поле age будет >= 38
● db.users.find({$or: [{age: {$gte: 38}}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

ищем все записи, у которых поле age будет <= 38
● db.users.find({$or: [{age: {$lte: 38}}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

ищем все записи, у которых поле age будет = 38
● db.users.find({$or: [{age: {$eq: 38}}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

ищем все записи, у которых поле age будет != 38
● db.users.find({$or: [{age: {$ne: 38}}, {email: "qwerty@qwerty.ru"}]}, {_id:0})

Ищем соответствие по разновидности какой-либо колонки
● db.users.find({name: {$in: ["Ivan", "Vasya"]}}, {_id:0})

Инверсируем вышенаписанный пример. Выведим все объекты, которые не будут соответствовать указанным параметрам
● db.users.find({name: {$nin: ["Ivan", "Vasya"]}}, {_id:0})

Найдем все объекты, у которых будет поле child
● db.users.find({child: {$exists: true}}, {_id:0})

Инверсируем вышенаписанный пример. Найдем все объекты, у которых нет поля child
● db.users.find({child: {$exists: false}}, {_id:0})

Найдем все объекты, у которых длина массива не менее n
● db.users.find({favColors.1: {$exists: true}})

выведем те объекты, у которых размер массива в колонке favColors будет равен 2 элементам
● db.users.find({favColors: {$size: 2}}, {_id:0})

выбираем все объекты, у которых есть поле favColors, и у них первый элемент в массиве будет равен "Красный"
● db.users.find({favColors.1: "Красный"}, {_id:0})

выведем элементы, которые соответствуют следующему правилу: они меньше, чем буковка "а"
● db.users.find({favColors: {$elemMatch: {$lte: "a"}}}, {_id:0})

то (ПЕРВОЕ) поле age, которое раньше имело значение 22, теперь имеет значение 25
● db.users.updateOne({age: 22}, {$set: {age: 25}})

все поля age, которые раньше имели значение 25, теперь будут иметь значение 17
● db.users.updateMany({age: 25}, {$set: {age: 17}})

у всех полей, у которых age раньше имело значение 17, теперь name будет "User33", а email будет "test33@email.com"
● db.users.updateMany({age: 17}, {$set: {name: "User33", email: "test33@email.com"}})

выберем один объект, у которого поле age = 17 и полностью заменим его на новый объект
● db.users.replaceOne(
 {age: 17},
 {name: "New User", hasCar: 23, password: "234", hasWife: true}
)

удалим одну (первую попавшуюся) запись, у которой 22 <= age <= 38
● db.users.deleteOne({age: {$gte: 22}, age: {$lte: 38}})

удалим все записи, у которых 15 <= age <= 38
● db.users.deleteMany({age: {$gte: 15}, age: {$lte: 38}})

bulkWrite - это команда, которая позволяет в себе объединить несколько команд.
Каждая операция производятся над одним объектом, поэтому здесь мы не можем использовать Many
● db.users.bulkWrite([
 {
  insertOne: {
   "document": {name: "User4", age: 45, email: "sdftest@email.com"}
  }
 },
 {
  deleteOne: {
   filter: {age: 20}
  }
 },
 {
  updateOne: {
   filter: {name: "Vasya"}, update: {$set: {email: "new_email@test.ru"}}
  }
 },
 {
  replaceOne: {
   filter: {name: "Petr"}, replacement: {name: "John"}
  }
 }
])

до этого в нашей БД была всего 1 коллекция users, сейчас создаем еще одну коллекцию под названием articles
● db.articles.insertMany([
{
 "title": "Акции растут1",
 "anons": "Акции растут много где",
 "text": "Супер текст",
 "date": new Date('2021-11-11'),
},
{
 "title": "Акции растут2",
 "anons": "Акции растут много где",
 "text": "Супер текст",
 "date": new Date('2020-11-11'),
},
{
 "title": "Акции растут3",
 "anons": "Акции растут много где",
 "text": "Супер текст",
 "date": new Date('2022-11-11'),
}
])

создаем индексы, чтобы указать, в каких полях мы будем отслеживать информацию.
Хотим искать текст в таких полях как title, anons и text.
● db.articles.createIndex({title: "text", anons: "text", "text": "text"})

ищем те записи, у которых будет находиться определенный кусочек текста
● db.articles.find({$text: {$search: "Супер текст"}})

ищем наиболее релевантные совпадения
● db.articles.find(
 {$text: {$search: "текст"}},
 {score: {$meta: "textScore"}}
)

сделаем то же самое, но еще и отсортируем по полю score для большей релевантности
● db.articles.find(
 {$text: {$search: "текст"}},
 {score: {$meta: "textScore"}}
).sort({score: {$meta: "textScore"}})

найдем кол-во объектов, у которых age = 45
● db.users.count({age: 45})

найдем кол-во объектов, у которых name = "Vasya"
● db.users.count({name: "Vasya"})

выведем массив из уникальных name
● db.users.distinct("name")

выведем массив из уникальных age
● db.users.distinct("age")

группировки.
Объединим все записи таблицы users где поле name = "Vasya". В качестве второго параметра
указываем, что хотим получить. В данном примере хотим получить сумму всех возрастов.
● db.users.aggregate([
 {$match: {name: "Vasya"}},
 {$group: {_id: "$name", age: {$sum: "$age"}}}
])
