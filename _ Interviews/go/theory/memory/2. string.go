package main

import (
	"fmt"
	"unsafe"
)

// unsafe.Sizeof для любой строки будет выдавать 16 байт
// https://stackoverflow.com/questions/65878177/unsafe-sizeof-says-any-string-takes-16-bytes-but-how

func main() {
	var a string
	fmt.Println(unsafe.Sizeof(a)) // 16

	a = "Hello world"
	fmt.Println(unsafe.Sizeof(a)) // 16
}

/*
Почему?
В языке программирования Go каждая строка (`string`) весит 16 байт, потому
что строка в Go представлена структурой, которая содержит два поля:

1. **Указатель на данные** (`data`): это указатель на первый байт данных строки.
2. **Длина строки** (`len`): это целое число, представляющее длину строки в байтах.

Эта структура в Go выглядит следующим образом:

```go
type string struct {
    data uintptr
    len  int
}
```

### Разбор по байтам:

- **Указатель на данные** (`data`):
  - На 64-битных системах указатель занимает 8 байт.
  - На 32-битных системах указатель занимает 4 байта.

- **Длина строки** (`len`):
  - На всех платформах (включая 32-битные и 64-битные) тип `int` в Go занимает
8 байт.

На большинстве современных систем, которые являются 64-битными, указатель
будет занимать 8 байт. Следовательно:

- **8 байт** для указателя на данные.
- **8 байт** для длины строки.

Итого: **8 байт + 8 байт = 16 байт**.

Таким образом, независимо от фактического содержания строки, каждая строка в
Go занимает 16 байт для хранения указателя на данные и длины строки.
*/