В Python управление памятью и сборка мусора (garbage collection) реализованы с помощью
механизма автоматического управления памятью, который включает в себя:
1) подсчет ссылок
2) сборщик циклических ссылок

### Подсчет ссылок (Reference Counting)
Каждый объект в Python имеет счетчик ссылок, который отслеживает количество активных
ссылок на этот объект. Когда создается новая ссылка на объект, счетчик увеличивается.
Когда ссылка удаляется или переназначается, счетчик уменьшается. Когда счетчик ссылок
объекта достигает нуля, память, занимаемая этим объектом, освобождается немедленно.

Пример подсчета ссылок:
```python
import sys

a = []
print(sys.getrefcount(a))  # 2: одна ссылка в переменной 'a', другая в аргументе функции getrefcount

b = a
print(sys.getrefcount(a))  # 3: ссылки в переменных 'a' и 'b', и аргумент функции getrefcount

del b
print(sys.getrefcount(a))  # 2: ссылка в переменной 'a' и аргумент функции getrefcount
```

### Сборка циклических ссылок (Cycle Detection)
Подсчет ссылок не может обнаружить и удалить объекты, которые ссылаются друг на друга,
образуя циклы. Для этого Python имеет сборщик циклических ссылок, который периодически
проверяет объекты, чтобы найти и удалить циклы.

Сборщик циклов состоит из трех поколений (generations), которые используются для отслеживания
объектов по их возрасту. Новые объекты попадают в первое поколение. Объекты, которые
пережили несколько циклов сборки, перемещаются в старшие поколения. Более старые объекты
проверяются реже, поскольку они с меньшей вероятностью содержат циклические ссылки.

Процесс сборки циклов включает следующие этапы:
1. **Маркировка**: сборщик помечает все объекты, которые могут быть частью циклов.
2. **Поиск циклов**: сборщик ищет группы объектов, которые ссылаются друг на друга,
но недостижимы из корневого набора (root set), который включает активные переменные.
3. **Освобождение памяти**: сборщик удаляет циклические ссылки и освобождает память.


### Настройка сборщика мусора
Модуль `gc` предоставляет интерфейс для управления сборщиком мусора, например, можно
включить или отключить сборщик циклов, а также вручную инициировать сборку мусора.

Пример использования модуля `gc`:
```python
import gc

# Отключение автоматического сборщика мусора
gc.disable()

# Включение автоматического сборщика мусора
gc.enable()

# Принудительный запуск сборщика мусора
gc.collect()

# Получение статистики о сборке мусора
print(gc.get_stats())
```

### Преимущества и ограничения
**Преимущества:**
- **Автоматическое управление памятью**: Программистам не нужно вручную освобождать память,
что снижает вероятность ошибок.
- **Эффективное управление памятью**: Python эффективно освобождает память, занятую объектами,
которые больше не используются.

**Ограничения:**
- **Накладные расходы на производительность**: Сборка мусора может потреблять ресурсы
процессора и приводить к паузам в работе программы.
- **Неявное поведение**: Автоматическое управление памятью может скрыть от программиста
детали работы с памятью, что может усложнить отладку и оптимизацию программ.
