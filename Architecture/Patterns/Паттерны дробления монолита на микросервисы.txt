1. **Паттерн по функциям (Function-based decomposition)**: Дробление по бизнес-функциям или
основным функциональным областям. Например, выделение микросервисов для управления
пользователями, заказами и продуктами. Каждый сервис фокусируется на отдельной бизнес-функции.

2. **Паттерн по данным (Data-based decomposition)**: Разделение по набору данных, которыми
оперирует каждая часть системы. Например, один микросервис отвечает за данные клиентов, а
другой — за данные заказов. Это помогает избежать дублирования данных и упрощает управление
доступом к ним.

3. **Паттерн по действиям (Action-based decomposition)**: Дробление по действиям или процессам,
которые выполняет система. Например, можно выделить отдельные сервисы для создания заказов,
обработки платежей и управления доставкой.

4. **Паттерн по событиям (Event-driven decomposition)**: Создание микросервисов, которые
взаимодействуют друг с другом через события. Это помогает минимизировать прямые зависимости и
сделать систему более гибкой и расширяемой. Каждый сервис реагирует на конкретные события
(например, событие "новый заказ").

5. **Паттерн по слою (Layer-based decomposition)**: Разделение монолита по слоям архитектуры —
интерфейсный слой, бизнес-логика и слой данных. Каждый слой преобразуется в отдельный микросервис.
Это полезно, когда логика уже организована по слоям, но может усложнить управление связями между
сервисами.

6. **Странгуляция (Strangler Fig)**: Постепенное переписывание и перенос функциональности из
монолита в микросервисы. Новые функции сразу создаются как микросервисы, а старые — по мере
рефакторинга — также становятся микросервисами, пока весь монолит не будет разбит.

7. **Паттерн анти-коррупционного слоя (Anti-Corruption Layer)**: Введение промежуточного слоя,
который минимизирует зависимости между старым монолитом и новыми микросервисами. Это помогает
управлять совместимостью и адаптировать интерфейсы.
