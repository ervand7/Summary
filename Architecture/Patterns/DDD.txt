Domain-Driven Design (DDD) is a software design approach focused on modeling
software based on the core business domain. Eric Evans popularized this concept in
his book *Domain-Driven Design: Tackling Complexity in the Heart of Software.*
DDD emphasizes collaboration between domain experts and developers to create software
that accurately reflects and supports the business requirements. Here's a breakdown
of the key concepts in DDD:

1. **Единый язык (Ubiquitous Language)**
   - Это общий язык, понятный и разработчикам, и бизнес-экспертам.
   - Пример: "Заказ" означает одно и то же для всех участников проекта — как для
   программистов, так и для отдела продаж.

2. **Ограниченная область (Bounded Context)**
   - Это граница, в рамках которой определенные термины и правила уникальны.
   - Пример: В отделе продаж "Заказ" — это только информация о покупках, а в отделе
   доставки "Заказ" — это данные о доставке.

3. **Сущности и объекты-значения (Entities and Value Objects)**
   - **Сущность** имеет уникальный идентификатор и важна сама по себе.
   **Объект-значение** — это просто набор данных.
   - Пример: "Пользователь" — сущность с уникальным ID, а "Адрес" — объект-значение,
   который важен сам по себе.

4. **Агрегаты и корни агрегации (Aggregates and Aggregate Roots)**
   - **Агрегат** — это группа связанных объектов, которые действуют как одно целое.
   **Корень агрегации** — главный объект, через который управляются все остальные в группе.
   - Пример: "Заказ" (корень агрегации) включает в себя товары, которые были заказаны
   (все товары связаны с этим заказом).

5. **Репозитории и фабрики (Repositories and Factories)**
   - **Репозиторий** хранит и управляет сущностями, **фабрика** создает сложные объекты.
   - Пример: Репозиторий "Заказов" помогает сохранить и получить заказы, а фабрика
   создаёт новый заказ с нужными данными.

6. **Доменные сервисы (Domain Services)**
   - Сервисы, которые не принадлежат к одной сущности, но важны для бизнес-логики.
   - Пример: Сервис "Рассчёт доставки", который использует данные о заказе и адресе для
   расчета стоимости доставки.

7. **Событийное управление и CQRS (Event-Driven and CQRS)**
   - События фиксируют важные изменения, а CQRS разделяет операции чтения и записи для
   улучшения производительности.
   - Пример: Когда заказ подтверждён, создается событие "Заказ подтверждён", которое
   запускает процессы отправки и уведомления клиента.

### When to Use DDD
   - DDD is especially useful for complex, large-scale applications with evolving
   business requirements. In simpler applications, however, DDD might add unnecessary
   complexity.

