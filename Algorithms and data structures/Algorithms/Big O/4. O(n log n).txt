Сложность O(n log n) обычно возникает в алгоритмах, которые эффективно сортируют
или обрабатывают данные. Вот несколько примеров операций с O(n log n) сложностью:

1. **Быстрая сортировка (Quicksort)**: Одним из наиболее известных алгоритмов сортировки
с O(n log n) сложностью является быстрая сортировка. Он разделяет массив на подмассивы,
сортирует их и объединяет в отсортированный массив.

2. **Сортировка слиянием (Merge Sort)**: Алгоритм сортировки слиянием также имеет
сложность O(n log n). Он разделяет массив на две равные части, сортирует каждую часть,
а затем объединяет их в отсортированный массив.

3. **Хеш-таблицы (с учетом коллизий)**: При использовании хеш-таблиц с открытой
адресацией, где коллизии разрешаются путем последовательного поиска, сложность вставки
и поиска может быть O(n log n), особенно если фактор загрузки близок к 1.

4. **Сортировка кучей (Heap Sort)**: В алгоритме сортировки кучей, для сортировки
элементов используется структура данных кучи. Сложность сортировки кучей также
составляет O(n log n).

5. **Бинарное дерево поиска (BST) - в худшем случае**: Вставка, поиск и удаление
элементов в несбалансированном бинарном дереве поиска могут иметь O(n log n) сложность
в худшем случае, когда дерево становится линейным.

6. **Алгоритмы для определения ближайших соседей**: В машинном обучении и анализе
данных, алгоритмы, такие как k-ближайших соседей (k-NN), могут иметь O(n log n)
сложность при поиске ближайших соседей для новых точек.

7. **Алгоритм сжатия данных**: Некоторые алгоритмы сжатия данных, такие как алгоритм
Хаффмана, имеют сложность O(n log n) при построении оптимального кодирования.

Эти операции имеют сложность O(n log n) в среднем или худшем случае, что делает их
эффективными для обработки больших объемов данных.