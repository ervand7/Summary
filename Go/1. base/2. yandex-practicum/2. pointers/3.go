package main

import "fmt"

func main() {
	/*
		Литералы композитных типов создают в памяти переменную соответствующего типа,
		поэтому указатель можно создать вот так:
	*/
	type A struct {
		IntField int
	}
	// Литерал А{} создаёт в памяти переменную типа А. Затем от неё берётся указатель
	a := &A{} // или new(A)
	a.IntField = 1
	fmt.Printf("%v\n", a) // &{1}

	b := &A{} // или new(A)
	b.IntField = 2
	fmt.Printf("%v\n", b) // &{2}

	// видим, что при a := &A{} и b := &A{} в памяти каждый раз создавалась
	// новая переменная со своим адресом. И от нее брался указатель
	fmt.Println(&a)
	fmt.Println(&b)
}
