Сложность O(log n) означает логарифмическую сложность, что означает, что время
выполнения операции увеличивается логарифмически по отношению к размеру входных
данных (n). Вот некоторые виды операций, у которых сложность O(log n):

1. **Бинарный поиск**: Поиск элемента в отсортированном массиве выполняется за O(log n)
времени. Это происходит путем разделения массива пополам и сравнения искомого значения
с элементом в середине массива. Затем выбирается половина массива для дальнейшего поиска.

2. **Двоичное дерево поиска**: Операции вставки, удаления и поиска в двоичных деревьях
поиска выполняются за O(log n) времени в среднем случае, при условии, что дерево
сбалансировано.

3. **Кучи (heap)**: Операции вставки и извлечения наибольшего (или наименьшего) элемента
из кучи выполняются за O(log n) времени. Кучи используются в алгоритмах сортировки,
таких как сортировка кучей (heap sort).

4. **Графы (поиск в глубину и в ширину)**: Поиск в глубину и в ширину в графах может
выполняться за O(log n) времени, где n - число вершин в графе, если граф имеет
определенную структуру.

5. **Двоичные операции с числами**: Операции умножения и деления двоичных чисел могут
выполняться за O(log n) времени, где n - количество битов в числах.

Операции с логарифмической сложностью обычно связаны с эффективными методами разделения
данных или структур данных, которые позволяют быстро сузить область поиска или
выполнить разделение данных на более мелкие части.