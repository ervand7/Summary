EVM stands for Ethereum Virtual Machine. It's a crucial component of the Ethereum
blockchain and serves as the runtime environment for smart contracts in Ethereum.
Here’s a more detailed explanation of EVM in the context of Solidity:

EVM-compatible blockchains: Avalanche, Fantom, Polygon - here we can
deploy our solidity code.

Can access and store information in six places:
In Solidity and the Ethereum Virtual Machine (EVM), information can be accessed and stored in
six distinct places, each serving a different purpose and having different properties:
1. **Storage**:
   - **Description**: Persistent storage for smart contracts. This data is stored
   on the blockchain and remains there indefinitely unless explicitly changed.
   - **Usage**: Used for storing contract state variables.
   - **Cost**: Expensive in terms of gas.
   - **Scope**: Persistent across function calls and transactions.
   Можно сказать, что хранилище (storage) в Solidity представлено как массив
   32-байтовых слотов. Этот массив позволяет адресоваться по индексам (слотам), что
   позволяет контракту сохранять и читать данные в этих слотах. Каждый слот в хранилище
   имеет фиксированную длину в 32 байта (256 бит). Вот несколько ключевых моментов:
        1. **Простые типы данных**:
           - Например, переменная типа `uint256` или `bool` сохраняется в отдельном слоте.
           `uint256` занимает весь слот, а `bool` занимает только 1 байт, но все равно
           резервирует весь слот.

        2. **Сложные типы данных**:
           - **Массивы**: Длина динамического массива хранится в одном слоте, а его элементы
           хранятся в последовательных слотах, начинающихся с хэшированного значения базового слота.
           - **Маппинги**: Для маппингов используется хэширование ключа и базового слота, чтобы
           определить, в каком слоте хранятся данные.

        ### Пример
        Рассмотрим пример хранения данных из твоего контракта:

        ```solidity
        uint256 favoriteNumber; // Слот 0
        bool someBool; // Слот 1
        uint256[] myArray; // Слот 2 (длина массива), элементы по адресу keccak256(2)
        mapping(uint256 => bool) myMap; // Пустой слот 3, элементы по адресу keccak256(ключ . 3)
        ```

        ### Визуализация
        ```plaintext
        Slot 0: favoriteNumber (uint256)
        Slot 1: someBool (bool)
        Slot 2: myArray.length (uint256)
        Slot 3: myMap (mapping, пустой слот)
        Slot keccak256(2): myArray[0]
        Slot keccak256(2) + 1: myArray[1]
        Slot keccak256(ключ . 3): myMap[ключ]
        ```

2. **Memory**:
   - **Description**: A temporary, mutable space used during contract execution.
   It’s cleared after the execution ends.
   - **Usage**: Used for function arguments, local variables, and temporary data.
   - **Cost**: Cheaper than storage but still has gas costs associated with it.
   - **Scope**: Limited to the function execution.

3. **Stack**:
   - **Description**: A fixed-size data structure (limited to 1024 elements) used
   for small data values.
   - **Usage**: Used for operations and storing small local variables.
   - **Cost**: Very cheap in terms of gas.
   - **Scope**: Limited to the function execution.

4. **Calldata**:
   - **Description**: Read-only area where data passed to functions (via external calls)
   is stored. It’s not modifiable and is cheaper than memory.
   - **Usage**: Used for function arguments in external functions.
   - **Cost**: Cheaper compared to memory for external calls.
   - **Scope**: Limited to the function call.

5. **Code (Contract Code)**:
   - **Description**: The compiled bytecode of the smart contract, which is
   immutable and stored on the blockchain.
   - **Usage**: Used for executing the contract logic. It is not modifiable once deployed.
   - **Cost**: Gas is required to deploy the contract code.
   - **Scope**: Persistent and immutable once deployed.

6. **Logs (Event Logs)**:
   - **Description**: Special storage used to log events. These logs are stored on
   the blockchain but are not accessible by contracts. They are primarily used for
   off-chain applications to listen to and react to events.
   - **Usage**: Used to emit events that can be captured by off-chain applications.
   - **Cost**: Logs cost gas but are cheaper compared to storage.
   - **Scope**: Persistent and available off-chain via transaction receipts.

### Summary Table

| Storage Location | Description                             | Usage                            | Cost       | Scope                  |
|------------------|-----------------------------------------|----------------------------------|------------|------------------------|
| **Storage**      | Persistent, contract state              | State variables                  | Expensive  | Persistent             |
| **Memory**       | Temporary, function execution           | Function arguments, local vars   | Moderate   | Function execution     |
| **Stack**        | Fixed-size, small data values           | Operations, small local vars     | Very cheap | Function execution     |
| **Calldata**     | Read-only, function input               | Function arguments (external)    | Cheap      | Function call          |
| **Code**         | Immutable, contract bytecode            | Contract logic execution         | Deploy gas | Persistent, immutable  |
| **Logs**         | Special storage for events              | Emitting events                  | Moderate   | Persistent, off-chain  |

Understanding these different storage locations and their characteristics is crucial
for efficient and effective Solidity programming, especially when optimizing for
gas costs and ensuring proper data management.