1. **Binary Tree:** A tree structure in which each node has at most two children,
referred to as the left child and the right child. There is no specific order or rule
for the arrangement of nodes.
Example:
           1
     2             3
  6    5        7    4

2. **Binary Search Tree (BST):** A binary tree in which the left child is less than
or equal to the parent node, and the right child is greater than the parent node.
It allows for efficient searching, insertion, and deletion.
Example:
           10                                    1
     5             15         or          -333       2
  3    7        13    17                                3
                                                           4

3. **Balanced Binary Tree:** A binary tree in which the depth of the left and right subtrees
of every node differs by at most one. Examples include AVL trees and Red-Black trees.
Example:
           10
     5             15
  3    7        13    17

4. **Heap:** A specialized tree-based data structure in which the parent node is either greater
(max heap) or smaller (min heap) than its children. Heaps are often used to implement
priority queues.
Example:
           1                                        10
     2             3          or               8             9
  4    5        6    7                      4    5        6    7

5. **Trie (Prefix Tree):** A tree structure used to store a dynamic set of strings,
such as a dictionary or autocomplete suggestions. It's particularly efficient
for string-based searches and lookups.
Example:
Root
|-- 'b'
    |-- 'a'
        |-- 't'
            |-- 's' (end of word)
            |-- 'm'
                |-- 'a'
                    |-- 'n' (end of word)
            |-- 'w'
                |-- 'o'
                    |-- 'm'
                        |-- 'a'
                            |-- 'n' (end of word)


6. **B-Tree:** A self-balancing tree structure designed for storing large amounts
of data on disk. It's commonly used in databases and file systems.
Example:
                [30, 60]
               /    |    \
     [5, 10, 20] [40, 50] [70, 80, 90]


7. **B+ Tree:** A variant of the B-tree that optimizes for range queries and is
often used in databases for indexing.

8. **Segment Tree:** A tree structure used for various range-query tasks, such as finding
the sum or minimum value within a given range of an array.

9. **Quadtree and Octree:** Tree structures used in spatial indexing for two-dimensional
and three-dimensional data, respectively.

10. **Splay Tree:** A self-adjusting binary search tree that brings frequently accessed
nodes closer to the root, improving search performance for recently accessed elements.

11. **Ternary Search Tree:** A tree structure used for storing a dynamic set of strings,
similar to a trie but with some advantages in terms of space efficiency.

12. **Suffix Tree and Suffix Array:** Data structures used in string matching and pattern
searching, such as in bioinformatics applications.

13. **Huffman Tree (Huffman Coding):** A tree structure used for data compression, where
frequently used characters have shorter encodings.

14. **Expression Tree:** A tree representation of mathematical expressions, used in compilers
and evaluators.

15. **Merkle Tree:** A tree structure used in cryptographic applications for verifying data
integrity and consistency.

These are some of the common types of trees used in programming and data structures. Each type
has its own characteristics and is suited to specific tasks and applications.

