Из прошлых уроков вы знаете, что интерфейс — это набор методов, которые
тип должен реализовать, чтобы удовлетворить интерфейс. С появлением
дженериков интерфейс может предъявлять требования не только к набору методов,
но и к типу данных. Эти требования описываются в пакете
golang.org/x/exp/constraints. Например, интерфейс constraints.Unsigned,
описывающий все беззнаковые целые типы, декларирован так:
type Unsigned interface {
    ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr
}

Вертикальная черта | означает union — объединение множеств, то есть сюда
подходят и uint8, и uint16. Тильда ~ в квалификаторе ~uint8 означает, что
подходит не только uint8, но и любой производный от него тип. Например,
type MyUint8 uint8 тоже подойдёт.

Вот остальные ограничения пакета exp/constraints:
 - Complex — комплексные числа ~complex64 | ~complex128;
 - Float — числа с плавающей точкой ~float32 | ~float64;
 - Signed — знаковые целые числа ~int | ~int8 | ~int16 | ~int32 | ~int64;
 - Integer — целые числа Signed | Unsigned;
 - Ordered — типы, которые поддерживают операции сравнения Integer | Float | ~string.