// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamMultiServiceClient is the client API for StreamMultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamMultiServiceClient interface {
	MultiResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (StreamMultiService_MultiResponseClient, error)
}

type streamMultiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMultiServiceClient(cc grpc.ClientConnInterface) StreamMultiServiceClient {
	return &streamMultiServiceClient{cc}
}

func (c *streamMultiServiceClient) MultiResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (StreamMultiService_MultiResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamMultiService_ServiceDesc.Streams[0], "/demo.StreamMultiService/MultiResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamMultiServiceMultiResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamMultiService_MultiResponseClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type streamMultiServiceMultiResponseClient struct {
	grpc.ClientStream
}

func (x *streamMultiServiceMultiResponseClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamMultiServiceServer is the server API for StreamMultiService service.
// All implementations must embed UnimplementedStreamMultiServiceServer
// for forward compatibility
type StreamMultiServiceServer interface {
	MultiResponse(*Request, StreamMultiService_MultiResponseServer) error
	mustEmbedUnimplementedStreamMultiServiceServer()
}

// UnimplementedStreamMultiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamMultiServiceServer struct {
}

func (UnimplementedStreamMultiServiceServer) MultiResponse(*Request, StreamMultiService_MultiResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiResponse not implemented")
}
func (UnimplementedStreamMultiServiceServer) mustEmbedUnimplementedStreamMultiServiceServer() {}

// UnsafeStreamMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMultiServiceServer will
// result in compilation errors.
type UnsafeStreamMultiServiceServer interface {
	mustEmbedUnimplementedStreamMultiServiceServer()
}

func RegisterStreamMultiServiceServer(s grpc.ServiceRegistrar, srv StreamMultiServiceServer) {
	s.RegisterService(&StreamMultiService_ServiceDesc, srv)
}

func _StreamMultiService_MultiResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamMultiServiceServer).MultiResponse(m, &streamMultiServiceMultiResponseServer{stream})
}

type StreamMultiService_MultiResponseServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type streamMultiServiceMultiResponseServer struct {
	grpc.ServerStream
}

func (x *streamMultiServiceMultiResponseServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// StreamMultiService_ServiceDesc is the grpc.ServiceDesc for StreamMultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.StreamMultiService",
	HandlerType: (*StreamMultiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiResponse",
			Handler:       _StreamMultiService_MultiResponse_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/grpc.proto",
}
