CRUD - create, read, update, delete
==================================================================================================================
==================================================================================================================
==================================================================================================================
--------------------------== CRUD. Create. Рассмотрим 3 варианта добавления записей. ==---------------------------
ВАРИАНТ ДОБАВЛЕНИЯ ЗАПИСЕЙ №1:
Запускаем консоль Джанго. Открываем терминал и вводим:
● cd my_site

● python manage.py shell
сам запуск консоли

● from news.models import News
для того, чтобы работать с моделью, нам нужно ее импортировать. Обращаем внимание на регистр.
Модель у нас принято называть в верхнем регистре.

● News(title='Новость 1', content='Контент новости 1')
попробуем записать данные в таблицу. Запись модели создается вызовом ее конструктора
и передачи в этот конструктор именованных параметров, соответствующих атрибутам модели.
Но, если мы сейчас откроем наши таблички, мы увидим, что данные еще не добавились.
Мы их создали, но еще не сохранили.

● news1 = _
с помощью специальной переменной "_" мы сохраняем сохраняем результат впеременную news1.
Все это выражение расшифровывается как <news1 = последнему результату>

● news1
попробуем вывести этот объект и видим <News: News object (None)>. None - это номер объекта,
id (автоинкремент), которого еще у нас нет и его не будет до тех пор, пока мы не сохраним запись

● news1.title
выводит 'Новость 1'

● news1.save()
сохраняем запись

● news1.id
выводит '1'

● from django.db import connection
● connection.queries
так мы можем увидеть, как вставляются данные

● news1.pk
обращаемся к primary key (id)

● news2 = News(title='Новость 2', content='Контент новости 2')
пробуем записать еще одну новость

● connection.queries
так мы снова видим, как вставляются данные

● news2.save()
сохраняем эту вторую запись

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ВАРИАНТ ДОБАВЛЕНИЯ ЗАПИСЕЙ №2:
● news3 = News()
● news3.title = 'Новость 3'
● news3.content = 'Контент новости 3'
● news3.save()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ВАРИАНТ ДОБАВЛЕНИЯ ЗАПИСЕЙ №3:
● news4 = News.objects.create(title='Новость 4', content='Контент новости 4')
в данном случае после нажатия Enter запись будет автоматически сохранена.
Нам не нужно будет набирать команду news4.save()

● news4.pk
обращаемся к primary key и видим айдишник '4'

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Давайте посмотрим, как нам возвращается результат.
● News.objects.create(title='News 5', content='News 5 content')
получаем <News: News object (5)>


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Read ==-----------------------------------------------------
Если мы вдруг закрыли консоль, то повторяем первые 3 команды из начала этого файла.
● cd my_site
● python manage.py shell
● from news.models import News

● News.objects.all()
получаем получаем QuerySet объект. Это все записи из нашей модели News

● news = _
● news
● for item in news:
       print(item.title, item.is_published)
● 2 раза нажимаем Enter
раз News.objects.all() - это итерабельный объект, то мы по нему можем итерироваться

● News.objects.order_by('title')
получаем все записи из нашей модели News, сортированнные по title

● News.objects.order_by('-title')
то же самое, но в обратном порядке

● News.objects.exclude(title='News 5')
все записи, кроме какой-то конкретной

● exit()
в каких-то случаях для переиндексации изменений нужно перезайти в Джанго-консоль

● News.objects.create(title='News 5', content='News 6 content')
● News.objects.filter(title='News 5')
выводим 2 новости с одинаковыми заголовками. У нас уже есть новость, которая называется 'News 5'.
Создадим еще одну такую же, но с другим контентом (чтобы их как-то отличать).
А потом попробуем вывести их вместе.

● News.objects.get(pk=5)
с помощью метода get получаем конкретную запись. Здесь можно было указать id, но мы укажем pk, так
как по конвенции Джанго это будет правильнее
● News.objects.get(title='News 5')
в данном случае мы получим ошибку, так как с таким title у нас более 1 записи.
Поэтому выводить информацию нужно только с индексируемым (уникальным) ключом, например (pk=5)


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Update ==-----------------------------------------------------
Для того, чтобы обновить (изменить) запись, сначала ее нужно получить.
● News.objects.get(pk=4)
● news4 = _
● news4

● news4.title = 'Новость обновденная 4'
обновляем
● news4.save()
сохраняем
● News.objects.get(pk=4)
проверяем


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Delete ==-----------------------------------------------------
Для того, чтобы удалить запись, сначала ее нужно получить.
● news3 = News.objects.get(pk=3)
● news3.delete()
