1) вычисления в теле цикла

2) импорт модуля целиком

3) не закрытый файл

4) циклические ссылки
Циклические ссылки возникают, когда объекты ссылаются друг на друга,
что мешает сборщику мусора освободить память.
```python
class Node:
    def __init__(self):
        self.next = None

a = Node()
b = Node()
a.next = b
b.next = a
```

5) глобальные переменные
Использование глобальных переменных может привести к тому, что объекты
останутся в памяти дольше, чем необходимо.
```python
my_list = []

def add_to_list(item):
    global my_list
    my_list.append(item)
```

6) сохранение замыканий (closures)
Замыкания могут сохранять ссылки на объекты, даже когда они больше не нужны.
```python
def create_closure():
    my_list = []
    def closure():
        return my_list
    return closure
```

7) сильные ссылки на исключения
Исключения хранят трассировку стека, что может удерживать объекты в памяти.
```python
try:
    raise Exception("An error occurred")
except Exception as e:
    pass  # e после этого больше нигде не используем
```
