// SPDX-License-Identifier: MIT

// Be sure to check out solidity-by-example
// https://solidity-by-example.org/delegatecall

pragma solidity ^0.8.19;

// NOTE: Deploy this contract first
contract B {
    // NOTE: storage layout must be the same as contract A
    uint256 public num;
    address public sender;
    uint256 public value;

    function setVars(uint256 _num) public payable {
        num = _num;
        sender = msg.sender;
        value = msg.value;
    }
}

contract A {
    uint256 public num;
    address public sender;
    uint256 public value;

    function setVars(address _contract, uint256 _num) public payable {
        // A's storage is set, B is not modified.
        // (bool success, bytes memory data) = _contract.delegatecall(
        (bool success,) = _contract.delegatecall(abi.encodeWithSignature("setVars(uint256)", _num));
        if (!success) {
            revert("delegatecall failed");
        }
    }
}

Давай разберём этот код с точки зрения паттерна **Proxy**.
### Общая суть:
В данном примере есть два контракта: **A** и **B**. Контракт **A** вызывает функции
контракта **B** с помощью низкоуровневого вызова `delegatecall`. Этот вызов позволяет
контракту **A** использовать логику контракта **B**, но **все изменения происходят в
хранилище контракта A**, а не в контракте B.

### Как это работает:

1. **Контракт A (Proxy)**:
   Контракт **A** — это наш **proxy контракт**. Он содержит хранилище (storage) для
   переменных `num`, `sender` и `value`. Важно понимать, что этот контракт не содержит
   логики изменения этих переменных напрямую. Вместо этого он делегирует вызовы другому
   контракту через функцию `delegatecall`.

2. **Контракт B (Implementation)**:
   Контракт **B** — это **контракт-реализация** (implementation), содержащий логику для
   изменения переменных. У него есть функция `setVars`, которая принимает значение `num`
   и сохраняет его, а также устанавливает адрес отправителя и значение, переданное в
   качестве `msg.value`.

3. **Как работает `delegatecall`**:
   Когда контракт **A** вызывает `delegatecall` на адрес контракта **B**, выполняется
   код функции `setVars` контракта **B**, **но изменения записываются в хранилище контракта
   A**. Это ключевая особенность вызова `delegatecall` — он исполняет код целевого
   контракта, но использует хранилище вызывающего контракта.

### Шаги выполнения:
1. **setVars в контракте A** вызывает `delegatecall` на контракт **B**.
2. Код функции `setVars` из контракта **B** выполняется, но все изменения (`num`,
`sender`, `value`) происходят в хранилище контракта **A**, а не **B**.
3. Следовательно, контракт **B** выступает только как логика, а контракт **A** — как
место хранения данных.

### Почему важно соблюдать одинаковый **storage layout**:
В контракте **B** указано примечание, что **"storage layout must be the same as contract
A"**. Это связано с тем, что если бы хранилища контрактов отличались (например, разное
количество переменных или разные типы данных), то `delegatecall` мог бы привести к записи
данных в неправильные слоты, что вызвало бы неожиданные ошибки.

### Суть паттерна **Proxy**:
- **A** — это **proxy**, который хранит состояние (storage) и делегирует выполнение
логики другому контракту (в данном случае **B**).
- **B** — это **контракт-реализация** (implementation), который содержит логику. В
будущем его можно заменить на новый контракт, не изменяя хранилище контракта **A**.

Таким образом, паттерн **Proxy** позволяет обновлять логику контракта, не теряя данных,
хранящихся в контракте.